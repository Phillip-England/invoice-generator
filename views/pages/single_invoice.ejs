<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%=invoice.name%></title>
    <%- include('../partials/styles.ejs') %>
</head>
<body NODE_ENV="<%=NODE_ENV%>" page="single_invoice_page" id="body-single-invoice">

    <div id="page-overlay" class="visibility-hidden">
        <div id="page-overlay-loading-icon"></div>
    </div>
    
    <main id="page-single-invoice">

        <%- include('../partials/navbar.ejs') %>

        <section id="section-header" class="section-general">
            <div id="main-menu-single-invoice">
                <div class="wrapper-header-main-menu">
                    <h1 id="header-title" class="h1-main-menu"><%=invoice.name%></h1>
                </div>
                <div class="wrapper-header-main-menu">
                    <h1 id="header-date" class="h1-main-menu"><%=invoice.date%></h1>
                </div>
                <div class="wrapper-header-main-menu">
                    <h1 id="header-cost" class="header-cost h1-main-menu">$<%=invoice.cost%></h1>
                </div>
                <div class="wrapper-header-main-menu">
                    <a id="header-print" class="h1-main-menu clr-main hvr-clr-blk" href="<%=`generateInvoicePDF/${invoice._id}`%>">
                        <i class="fa-solid fa-print"></i>
                    </a>
                </div>
                <div class="wrapper-header-main-menu-removable">
                    <button id="button-main-menu" class="button-main-menu button-dormant">
                        <h1 id="menu-main-text" class="h1-main-menu">Actions</h1>
                        <i id="menu-main-icon" class="fa-solid fa-caret-down icon-in-button"></i>
                        <div id="main-menu-dropdown" class="main-menu-dropdown display-none">
                            <p id="button-main-menu-update" class="main-menu-dropdown-item display-none">Save</p>
                            <p id="button-main-menu-delete" class="main-menu-dropdown-item display-none">Delete</p>
                        </div>   
                    </button>
                </div>
            </div>
        </section>

        <section id="section-add-expense" class="flex-row-center-align section-general section-squash-sides">
            <form id="form-add-expense" class="form-general" url-post="<%=`/expense/addExpense/${user._id}/${invoice._id}`%>">
                <h1 class="h1-form-header">Add an Expense</h1>
                <p class="error-message bg-red clr-wht font-s-md pad-xs mar-b-xs hide"></p>
                <label class="label-general" for="expense_date">Date<span class="astrick hide">*</span></label>
                <input class="form-control input-required input-general" type="date" name="expense_date" label="Date">
                <label class="label-general" for="expense_vendor">Vendor<span class="astrick hide">*</span></label>
                <select class="form-control input-required input-general bg-wht" name="expense_vendor" type="text" label="Vendor">
                    <option value=""></option>
                    <% vendors.forEach(vendor => { %>
                        <option value="<%=vendor.name%>"><%=vendor.name%></option>
                    <% }) %>
                </select>
                <label class="label-general" for="expense_category">Category<span class="astrick hide">*</span></label>
                <select class="form-control input-required input-general bg-wht" name="expense_category" type="text" label="Category">
                    <option value=""></option>
                    <% categories.forEach(category => { %>
                        <option value="<%=category.name%>"><%=category.name%></option>
                    <% }) %>
                </select>    
                <label class="label-general" for="expense_description">Description<span class="astrick hide">*</span></label>
                <input class="form-control input-required input-general" type="text" name="expense_description" label="Description">
                <label class="label-general" for="expense_cost">Cost<span class="astrick hide">*</span></label>
                <input class="form-control input-required input-general" type="number" name="expense_cost" label="Cost">
                <div class="flex-row-center-align">
                    <button id="button-submit-expense" class="submit-button button-submit button-dormant" type="submit">
                            Add
                            <i class="fa-solid fa-money-check icon-in-button"></i>
                    </button>
                    <div class="loading-icon hide"></div>
                </div>
            </form>
        </section>


        <% if (expenses.length > 0) { %>
            <section id="wrapper-expenses-single-invoice" class="flex-column-center-align section-general">
                <form>
                    <table id="table-expenses" class="table-expenses nth-tr-bg-gry nth-tr-inpt-gry nth-tr-slct-odd-wht nth-tr-slct-even-gry nth-tr-inpt-clr-main">
                        <thead class="bg-color-main">
                            <tr>
                                <th class="font-p-md-l brd-r-tl-d pad-xs clr-wht width-50-px"></th>
                                <th class="expense-column-date column-date font-p-md-l pad-xs clr-wht">Date</th>
                                <th class="expense-column-invoice column-invoice font-p-md-l pad-xs clr-wht">Invoice</th>
                                <th class="expense-column-vendor column-vendor font-p-md-l pad-xs clr-wht">Vendor</th>
                                <th class="expense-column-category column-category font-p-md-l pad-xs clr-wht">Category</th>
                                <th class="expense-column-description column-description font-p-md-l pad-xs clr-wht">Description</th>
                                <th class="expense-column-cost column-cost font-p-md-l pad-xs clr-wht">Cost</th>
                                <th class="font-p-md-l pad-xs brd-r-tr-d clr-wht">Complete</th>
                            </tr>    
                        </thead>
                        <% expenses.forEach(expense => { %>
                            <tr class="expense-table-row" url-delete="<%=`/expense/deleteExpense/${expense._id}`%>" url-update="<%=`/expense/updateExpense/${invoice._id}/${expense._id}`%>">
                                <td>
                                    <div class="flex-row-center-align pad-xs">
                                        <input type="checkbox" class="expense-table-main-checkbox font-s-sm">
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <input name="expense_date" class="form-control expense-column-date width-inherit font-s-sm otln-none" size="0" value="<%=expense.date%>"></input>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <select name="expense_invoice" class="form-control expense-column-invoice width-inherit font-s-sm otln-none" name="expense_invoice">
                                            <option value="<%=invoice.name%>"><%=invoice.name%></option>
                                            <% invoices.forEach(inv => { %>
                                                <!-- omit the current category from the lisitng -->
                                                <%if (inv.name != invoice.name) { %>
                                                    <option value="<%=inv.name%>"><%=inv.name%></option>
                                                <% } %>
                                            <% }) %>
                                        </select>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <select name="expense_vendor" class="form-control expense-column-vendor width-inherit font-s-sm orln-none" name="expense_vendor">
                                            <option value="<%=expense.vendor%>"><%=expense.vendor%></option>
                                            <% vendors.forEach(vendor => { %>
                                                <!-- omit the current category from the lisitng -->
                                                <%if (expense.vendor != vendor.name) { %>
                                                    <option value="<%=vendor.name%>"><%=vendor.name%></option>
                                                <% } %>
                                            <% }) %>
                                        </select>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <select name="expense_category" class="form-control expense-column-category width-inherit font-s-sm otln-none" name="expense_category">
                                            <option value="<%=expense.category%>"><%=expense.category%></option>
                                            <% categories.forEach(category => { %>
                                                <!-- omit the current category from the lisitng -->
                                                <%if (expense.category != category.name) { %>
                                                    <option value="<%=category.name%>"><%=category.name%></option>
                                                <% } %>
                                            <% }) %>
                                        </select>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <input name="expense_description" class="form-control expense-column-description width-inherit font-s-sm otln-none" value="<%=expense.description%>"></input>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <input name="expense_cost" class="form-control expense-column-cost width-inherit font-s-sm otln-none" value="<%=expense.cost%>"></input>
                                    </div>
                                </td>
                                <td>
                                    <div class="flex-row-center-align">
                                        <% if (expense.completed ) { %>
                                            <input class="checkbox-complete-expense" type="checkbox" checked>
                                        <% } else { %>
                                            <input class="checkbox-complete-expense" type="checkbox" url-complete="<%=`/expense/completeExpense/${invoice._id}/${expense._id}`%>">
                                        <% } %>
                                    </div>
                                </td>
                            </tr>
                        <% }) %>
                    </table>
                </form>
            </section>
        <% } %>

        
        <section id="section-mobile-expenses" class="flex-column-center-align section-general section-squash-sides">
            <% expenses.forEach(expense => { %>
                <div class="grid-expense-mobile-information expense-mobile max-width-phone-size width-100 padding-sm border-radius-dull border-top-main-color box-shadow-main margin-bottom-md">
                    <h1 class="expense-mobile-date font-p-lg"><%=expense.date%></h1>
                    <div class="expense-icon-edit-container expense-mobile-icon flex-row-end-align display-flex">
                        <i class="fa-solid fa-pencil hover-color-main icon-show-update-form"></i>
                    </div>
                    <div class="expense-icon-delete-container expense-mobile-icon flex-row-end-align display-none">
                        <i class="fa-solid fa-trash-can hover-color-red icon-delete-mobile-expense" url-delete='<%=`/expense/deleteExpense/${expense._id}`%>'></i>
                    </div>
                    <p class="expense-mobile-vendor font-s-md"><%=expense.vendor%></p>
                    <div class="expense-mobile-delete flex-row-end-align">
                        <p class="font-s-md">Delete</p>
                        <input type="checkbox" class="margin-left-xxs checkbox-delete-mobile-expense">
                    </div>
                    <p class="expense-mobile-cost font-s-md">$<%=expense.cost%></p>
                    <div class="expense-mobile-complete flex-row-end-align">
                        <p class="font-s-md">Complete</p>
                        <% if (expense.completed == true) { %>
                            <input class="checkbox-complete-mobile-expense margin-left-xxs" url-complete="<%=`/expense/completeExpense/${invoice._id}/${expense._id}`%>" type="checkbox" checked>
                        <% } else { %>
                            <input class="checkbox-complete-mobile-expense margin-left-xxs" url-complete="<%=`/expense/completeExpense/${invoice._id}/${expense._id}`%>" type="checkbox">
                        <% } %>
                    </div>
                </div>

                <form class="form-update-expense form-general margin-bottom-md display-none" url-post='<%=`/expense/updateExpense/${invoice._id}/${expense._id}`%>'>
                    <div class="flex-row margin-bottom-xs">
                        <div class="width-100">
                            <h1 class="font-p-xl">Update Expense</h1>
                        </div>
                        <div class="flex-row-end-align width-100">
                            <i class="fa-solid fa-x hover-color-red icon-close-update-form"></i>
                        </div>
                    </div>
                    <p id="form-add-expense-error-message" class="form-error-message display-none"></p>
                    <label for="expense_date" class="font-p-md">Date<span class="astrick display-none">*</span></label>
                    <input type="date" name="expense_date" class="input-general form-control form-required" value="<%=expense.date%>">
                    <label for="expense_invoice" class="font-p-md">Invoice<span class="astrick display-none">*</span></label>
                    <select name="expense_invoice" class="input-general form-control form-required" name="expense_vendor">
                        <option value="<%=invoice.name%>"><%=invoice.name%></option>
                        <% invoices.forEach(inv => { %>
                            <!-- omit the current category from the lisitng -->
                            <%if (invoice.name != inv.name) { %>
                                <option value="<%=inv.name%>"><%=inv.name%></option>
                            <% } %>
                        <% }) %>
                    </select>
                    <label for="expense_vendor" class="font-p-md">Vendor<span class="astrick display-none">*</span></label>
                    <select name="expense_vendor" class="input-general form-control form-required" name="expense_vendor">
                        <option value="<%=expense.vendor%>"><%=expense.vendor%></option>
                        <% vendors.forEach(vendor => { %>
                            <!-- omit the current category from the lisitng -->
                            <%if (expense.vendor != vendor.name) { %>
                                <option value="<%=vendor.name%>"><%=vendor.name%></option>
                            <% } %>
                        <% }) %>
                    </select>
                    <label for="expense_category" class="font-p-md">Category<span class="astrick display-none">*</span></label>
                    <select name="expense_category" class="input-general form-control form-required" name="expense_vendor">
                        <option value="<%=expense.category%>"><%=expense.category%></option>
                        <% categories.forEach(category => { %>
                            <!-- omit the current category from the lisitng -->
                            <%if (expense.category != category.name) { %>
                                <option value="<%=category.name%>"><%=category.name%></option>
                            <% } %>
                        <% }) %>
                    </select>
                    <label for="expense_description" class="font-p-md">Description<span class="astrick display-none">*</span></label>
                    <input name="expense_description" type="text" class="input-general form-control form-required" value="<%=expense.description%>">
                    <label for="expense_cost" class="expense-mobile-label-cost font-p-md">Cost<span class="astrick display-none">*</span></label>
                    <input name="expense_cost" type="number" class="input-general form-control form-required" value="<%=expense.cost%>">
                    <div class="flex-row-center-align">
                        <button class="submit-button button-submit button-active" type="submit">
                                Update
                                <i class="fa-solid fa-file-pen padding-left-sm"></i>
                        </button>
                        <div class="loading-icon display-none"></div>
                    </div>
                </form>
            <% }) %>
        </section>

        <footer id="single_invoice_footer">

        </footer>

    </main>

</body>
</html>

<%- include('../partials/scripts.ejs') %>

<script>

const loadPage = () => {
    
    //viewport sizes
    let desktopSize = 950

    //collecting our HTML Elements
    let formAddExpense = document.getElementById('form-add-expense')
    let buttonSubmitExpense = document.getElementById('button-submit-expense')
    let inputTableCustom = document.getElementsByClassName('input-table-custom')
    let expenseTableInput = document.getElementsByClassName('expense-table-input')
    let expenseTableMainCheckbox = document.getElementsByClassName('expense-table-main-checkbox')
    let buttonMainMenu = document.getElementById('button-main-menu')
    let mainMenuDropdown = document.getElementById('main-menu-dropdown')
    let mainMenuDropdownItem = document.getElementsByClassName('main-menu-dropdown-item')
    let mainMenuUpdate = document.getElementById('button-main-menu-update')
    let expenseTableRow = document.getElementsByClassName('expense-table-row')
    let expenseMobile = document.getElementsByClassName('expense-mobile')
    let tableExpenses = document.getElementById('table-expenses')
    let invoiceCost = document.getElementById('header-cost')
    let pageOverlay = document.getElementById('page-overlay')
    let buttonMainMenuDelete = document.getElementById('button-main-menu-delete')
    let checkboxCompleteExpense = document.getElementsByClassName('checkbox-complete-expense')
    let checkboxCompleteMobileExpense = document.getElementsByClassName('checkbox-complete-mobile-expense')
    let formAddExpenseErrorMessage = document.getElementById('form-add-expense-error-message')
    let iconShowUpdateForm = document.getElementsByClassName('icon-show-update-form')
    let iconCloseUpdateForm = document.getElementsByClassName('icon-close-update-form')
    let formUpdateExpense = document.getElementsByClassName('form-update-expense')
    let iconDeleteMobileExpense = document.getElementsByClassName('icon-delete-mobile-expense')
    let checkboxDeleteMobileExpense = document.getElementsByClassName('checkbox-delete-mobile-expense')
    let expenseIconEditContainer = document.getElementsByClassName('expense-icon-edit-container')
    let expenseIconDeleteContainer = document.getElementsByClassName('expense-icon-delete-container')
    let gridExpenseMobileInformation = document.getElementsByClassName('grid-expense-mobile-information')

    //will make our inputs in our expense table fit their container
    window.addEventListener('load', function(){
        tableResizeInputs({
            column1: document.getElementsByClassName('expense-column-date'),
            column2: document.getElementsByClassName('expense-column-invoice'),
            column3: document.getElementsByClassName('expense-column-vendor'),
            column4: document.getElementsByClassName('expense-column-category'),
            column5: document.getElementsByClassName('expense-column-description'),
            column6: document.getElementsByClassName('expense-column-cost'),
        })
    })

    //will resize our expense table if we make modifications to the values
    if (tableExpenses != null){
        for(x = 0; x < tableExpenses.getElementsByClassName('form-control').length; x++){
            tableExpenses.getElementsByClassName('form-control')[x].addEventListener('input', function(){
                tableResizeInputs({
                column1: document.getElementsByClassName('expense-column-date'),
                column2: document.getElementsByClassName('expense-column-invoice'),
                column3: document.getElementsByClassName('expense-column-vendor'),
                column4: document.getElementsByClassName('expense-column-category'),
                column5: document.getElementsByClassName('expense-column-description'),
                column6: document.getElementsByClassName('expense-column-cost'),
                })
            })
        }
    }


    //colors our submit button for our add expense form if the form is complete
    //uses fireOnCondition() which will run true functions if a condition is met
    //and will run false functions if a condition is not met
    for (x = 0; x < formAddExpense.getElementsByClassName('form-control').length; x++){
        formAddExpense.getElementsByClassName('form-control')[x].addEventListener('input', function(e) {
            fireOnCondition(formIsComplete(formAddExpense.getElementsByClassName('form-control')), {
                trueFunctions: {
                    addClass: () => addClass(buttonSubmitExpense, 'button-active'),
                    removeClass: () => removeClass(buttonSubmitExpense, 'button-dormant')
                },
                falseFunctions: {
                    addClass: () => addClass(buttonSubmitExpense, 'button-dormant'),
                    removeClass: () => removeClass(buttonSubmitExpense, 'button-active')
                }
            })
        })
    }

    //submitting our expense form
    formAddExpense.addEventListener('submit', function(e){
        e.preventDefault()
        submitForm(this, 'POST', this.getAttribute('url-post'))
    })

    //will check a checkbox if a given input is clicked
    //uses clickCheckboxIfUnchecked which will take in a target and then click the checkbox if it is not checked
    if (tableExpenses != null){
        for (x = 0; x < tableExpenses.getElementsByClassName('form-control').length; x++){
            tableExpenses.getElementsByClassName('form-control')[x].addEventListener('click', function(e) {
                clickCheckboxIfUnchecked(this.parentElement.parentElement.parentElement.children[0].children[0].children[0])
            })
        }
    }


    //will activate our main menu button if any main checkboxes in our expense table are checked
    for (x = 0; x < expenseTableMainCheckbox.length; x++){
        expenseTableMainCheckbox[x].addEventListener('click', function(){
            fireOnCondition(boxesAreChecked(expenseTableMainCheckbox), {
                trueFunctions: {
                    //activating our main menu button
                    func1: () => addClass(buttonMainMenu, 'button-active'),
                    func2: () => removeClass(buttonMainMenu, 'button-dormant'),
                    //making our dropdown menu visible
                    func3: () => addClass(mainMenuDropdown, 'display-block'),
                    func4: () => removeClass(mainMenuDropdown, 'display-none')
                },
                falseFunctions: {
                    //deactivating our main menu button
                    func1: () => addClass(buttonMainMenu, 'button-dormant'),
                    func2: () => removeClass(buttonMainMenu, 'button-active'),
                    //hiding our dropdown menu
                    func3: () => addClass(mainMenuDropdown, 'display-none'),
                    func4: () => removeClass(mainMenuDropdown, 'display-block')
                }
            })
        })
    }

    //will make our dropdown menu visible if we click our main menu button
    buttonMainMenu.addEventListener('click', function(){
        for (x = 0; x < mainMenuDropdownItem.length; x++){
            swapClasses(mainMenuDropdownItem[x], 'display-block', 'display-none')
        }
    })

    //will make our dropdown menu disappear if the mouse leaves the menu
    buttonMainMenu.addEventListener('mouseleave', function(){
        removeClassMultiple(mainMenuDropdownItem, 'display-block')
        addClassMultiple(mainMenuDropdownItem, 'display-none')
    })

    //allowing our update button to post a PUT request to our server
    mainMenuUpdate.addEventListener('click', async function(){
        //showing our loader
        swapClasses(pageOverlay, 'visibility-hidden', 'visibility-visible')
        //getting all our rows with checked checkboxes
        let checkedRows = getCheckedRows(expenseTableRow, expenseTableMainCheckbox)
        //collecting our urls
        let urls = collectAttributes(checkedRows, 'url-update')
        //collecting our form values
        let formValues = getFormValuesMultiple(checkedRows,'form-control')
        //pushing all our fetch requests into an array
        let promises = []
        for (x = 0; x < urls.length; x++){
            promises.push(fetchSimple({
                url: urls[x],
                method: "POST",
                body: formValues[x]
            }))
        }  
        // resolving all of our promises
        Promise.all(promises)
            .then(function handleData(data){
                //data will reutrn an as array of objects with our cost
                //get the last item in the array (which will be the most recently updated cost) and render it
                renderData(invoiceCost, data[data.length-1].cost)
            })
            .catch(function handleError(error){
                console.log(error)
            })
        //reloading the page
        location.reload()
    })

    //allowing us to delete our expeneses by using a checkbox
    buttonMainMenuDelete.addEventListener('click', async function(){
        //showing our loader
        swapClasses(pageOverlay, 'visibility-hidden', 'visibility-visible')
        //getting all our rows with checked checkboxes
        let checkedRows = getCheckedRows(expenseTableRow, expenseTableMainCheckbox)
        //collecting our urls
        let urls = collectAttributes(checkedRows, 'url-delete')
        //pushing all of our fetch requests into an array of promises
        let promises = []
        for (x = 0; x < urls.length; x++){
            promises.push(fetchSimple({
                url: urls[x],
                method: "DELETE",
            }))
        }
        //resolving all of our promises
        Promise.all(promises)
            .then(function handleData(data){
                //data will reutrn an as array of objects with our cost
                //get the last item in the array (which will be the most recently updated cost) and render it
                renderData(invoiceCost, data[data.length-1].cost)
            })
            .catch(function handleError(error){
                console.log(error)
            })
        //reloading the page
        location.reload()
    })

    //lets us complete our expenses and update the current cost of the invoice
    for (x = 0; x < checkboxCompleteExpense.length; x++){
        let currentMobileCheckbox = checkboxCompleteMobileExpense[x]
        checkboxCompleteExpense[x].addEventListener('click', async function(e){
            //updating our expense via fetch
            let data = await fetchSimple({
                url: this.getAttribute('url-complete'),
                method: 'PUT'
            })
            //updating total cost in dom
            renderData(invoiceCost, data.cost)
            //checking the equivilent expense in our mobile expenses
            if (currentMobileCheckbox.checked){
                currentMobileCheckbox.checked = false
            } else {
                currentMobileCheckbox.checked = true
            }
        })
    }

    //lets us complete our expenses and update the current cost of the invoice
    for (x = 0; x < checkboxCompleteMobileExpense.length; x++){
        let currentDesktopCheckbox = checkboxCompleteExpense[x]
        checkboxCompleteMobileExpense[x].addEventListener('click', async function(e){
            //updating our expense via fetch
            let data = await fetchSimple({
                url: this.getAttribute('url-complete'),
                method: 'PUT'
            })
            //updating total cost in dom
            renderData(invoiceCost, data.cost)
            //checking the equivilent expense in our mobile expenses
            if (currentDesktopCheckbox.checked){
                currentDesktopCheckbox.checked = false
            } else {
                currentDesktopCheckbox.checked = true
            }
        })
    }

    //lets us reveal our mobile expense update form
    for (x = 0; x < iconShowUpdateForm.length; x++){
        let currentUpdateForm = formUpdateExpense[x]
        iconShowUpdateForm[x].addEventListener('click', function(){
            //hiding any open forms
            for (y = 0; y < formUpdateExpense.length; y++){
                addClass(formUpdateExpense[y], 'display-none')
                removeClass(formUpdateExpense[y], 'display-grid')
            }
            //hiding the current expense
            addClass(currentUpdateForm.previousElementSibling, 'display-none')
            removeClass(currentUpdateForm.previousElementSibling, 'display-grid')
            //opening the form associated with the current expense
            addClass(currentUpdateForm, 'display-grid')
            removeClass(currentUpdateForm, 'display-none')
        })
    }

    //closes all mobile expense update forms
    for (x = 0; x < iconCloseUpdateForm.length; x++){
        let currentUpdateForm = formUpdateExpense[x]
        iconCloseUpdateForm[x].addEventListener('click', function(){
            //closing all forms
            addClass(currentUpdateForm, 'display-none')
            removeClass(currentUpdateForm, 'display-grid')
            //revealing the hidden expense
            addClass(currentUpdateForm.previousElementSibling, 'display-grid')
            removeClass(currentUpdateForm.previousElementSibling, 'display-none')
        })
    }


    //lets us update our mobile expenses
    for (x = 0; x < formUpdateExpense.length; x++){
        formUpdateExpense[x].addEventListener('submit', function(event){
            event.preventDefault()
            submitForm(this, 'POST', this.getAttribute('url-post'))
        })
    }

    //reveals our delete mobile expense button
    for (x = 0; x < checkboxDeleteMobileExpense.length; x++){
        let currentUpdateIcon = iconShowUpdateForm[x]
        let currentEditContainer = expenseIconEditContainer[x]
        let currentDeleteContainer = expenseIconDeleteContainer[x]
        checkboxDeleteMobileExpense[x].addEventListener('click', function(){
            swapClasses(currentEditContainer, 'display-flex', 'display-none')
            swapClasses(currentDeleteContainer, 'display-flex', 'display-none')
        })
    }

    //allows us to delete our mobile expenses
    for (x = 0; x < iconDeleteMobileExpense.length; x++){
        let currentMobileInformation = gridExpenseMobileInformation[x]
        let currentUpdateForm = formUpdateExpense[x]
        iconDeleteMobileExpense[x].addEventListener('click', function(e){
            //removing the info section and form from the DOM
            currentMobileInformation.remove()
            currentUpdateForm.remove()
            //performing our DELETE request
            fetchSimple({
                url: this.getAttribute('url-delete'),
                method: 'DELETE'
            })
        })
    }




}

loadPage()


    




</script>